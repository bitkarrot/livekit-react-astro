---
import Layout from '~/layouts/LivekitLayout.astro';
import QuickComponent from '~/components/livekit/QuickComponent';
import '~/assets/styles/livekit/LKglobals.css';
import '@livekit/components-styles';
import '@livekit/components-styles/prefabs';
import { isVideoCodec } from '~/lib/livekit/types';

const params = Astro.params;
console.log('roomName:',  params)
const room = params.roomName || 'test_room';

// Create a URL object from the request URL string
const url = new URL(Astro.request.url);
const searchParams = url.searchParams;

const anonName = searchParams.get('name') || '';
console.log('url params - name:', anonName)

// Get pubkey from cookie, not URL parameter
const current_pubkey = Astro.cookies.get("pubkey")?.value ?? '';

// Now we can access searchParams properly
const codecParam = searchParams.get('codec');
// Make sure codecParam is a string before passing to isVideoCodec
const codec = (typeof codecParam === 'string' && isVideoCodec(codecParam)) ? codecParam : 'vp9';
const hq = (searchParams.get('hq') === 'true') ? true : false;
console.log('codec:', codec, 'hq:', hq)

////////////////////////////////////////////////////////////////////////
// TEMPORARILY JUST GRAB THE PROFILE DATA FOR THE REACT COMPONENT HERE
////////////////////////////////////////////////////////////////////////

// If pubkey (from cookie) or anonName are empty, redirect user to login page
// with a reference to this room name so that after they set their name or
// login with nostr, they are redirected back to this room
const hasValidPubkey = current_pubkey && current_pubkey.trim() !== '';
const hasValidName = anonName && anonName.trim() !== '';

if (!hasValidPubkey && !hasValidName) {
  const redirectUrl = new URL('/login', Astro.url);
  redirectUrl.searchParams.set('room', room);
  console.log("Redirecting to:", redirectUrl.toString());
  console.log('Redirecting to login page with room:', room);
  return new Response(null, {
    status: 302,
    headers: {
      'Location': redirectUrl.toString()
    }
  });

}

let username = '';
let avatar = '';
let lnaddress = '';
let pubkey = '';

if (current_pubkey) {
  console.log('Current pubkey from cookie:', current_pubkey)
  pubkey = current_pubkey;
  
  // Use the API call approach that works in the old version
  try {
    const response = await fetch(new URL(`https://beta.hivetalk.org/api/auth/${pubkey}`, Astro.url).toString(), {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'Astro-App'
      },
      cache: 'no-store'
    });
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    const data = await response.json();
    console.log('User Profile data', data);

    // Set all variables from data response
    username = data.data[0]?.username || '';
    avatar = data.data[0]?.avatar_url || '';
    lnaddress = data.data[0]?.lightning_address || '';
    console.log('Username:', username, 'Avatar:', avatar, 'Lightning Address:', lnaddress);
  } catch (error) {
    console.error('Error fetching user profile:', (error as Error).message || error);
  }

} else if (anonName) {
  username = anonName;
  pubkey = '';
  avatar = '';
  lnaddress = '';
}
// Type error suppressed: hq is a boolean, mismatch due to Astro-React type inference

---

<Layout title="Hivetalk Video Conference">
  <main>
    <div>
      <QuickComponent
        room_name={room}
        hq={hq}
        codec={codec}
        client:load="react"
        name={username}
        pubkey={pubkey}
        avatar={avatar}
        lnaddress={lnaddress}
      />
    </div>
  </main>
</Layout>
